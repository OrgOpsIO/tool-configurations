services:
  corteza:
    image: cortezaproject/corteza:${VERSION}
    container_name: corteza
    restart: always
    env_file: [ .env ]
    depends_on:
      corteza-db:
        condition: service_healthy
    volumes:
      - ./corteza/server:/data
    environment:
      # Database connection
      - DB_DSN=postgres://${DB_USER}:${DB_PASSWORD}@corteza-db:5432/${DB_NAME}?sslmode=disable

      # Server settings
      - HTTP_WEBAPP_ENABLED=true
      - DOMAIN=${SUBDOMAIN}.${DOMAIN_NAME}
      - HTTP_ADDR=0.0.0.0:80

      # Auth settings
      - AUTH_JWT_SECRET=${AUTH_JWT_SECRET}

      # Logging
      - ACTIONLOG_ENABLED=${ACTIONLOG_ENABLED}
      - LOG_LEVEL=${LOG_LEVEL}

      # SMTP settings
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_TLS_INSECURE=${SMTP_TLS_INSECURE}
      - SMTP_TLS_SERVER_NAME=${SMTP_TLS_SERVER_NAME}

      # Storage
      - STORAGE_PATH=/data/storage

      # Corteza specific
      - PROVISION_MIGRATE_DATABASE=true
      - PROVISION_CONFIGURATION=true
      - UPGRADE_ALWAYS=true
    networks:
      - corteza_internal
      - proxy_network

  corteza-db:
    image: postgres:15
    container_name: corteza-postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - corteza_internal

networks:
  corteza_internal:
  proxy_network:
    external: true
